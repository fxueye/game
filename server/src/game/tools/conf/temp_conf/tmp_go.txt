package conf

import (
	//"bufio"
	"encoding/json"
	"fmt"
	//"io"
	"io/ioutil"
	"os"
	//"strings"
)

type {{$.ClzName}}Elem struct {
	{{range $i, $n := $.ConfNames}}{{with $t := index $.ConfTypes $i}}{{$n}} {{if index $.ConfIsArrays $i}}[]{{end}}{{$t}}{{if eq $t "float"}}32{{end}}
	{{end}}{{end}}
}

type {{$.ClzName}}0 struct {
	Dic map[int]*{{$.ClzName}}Elem
	Arr []*{{$.ClzName}}Elem
}

var (
	{{$.ClzName}} {{$.ClzName}}0
)

func load{{$.ClzName}}(path string) {
	file, err := os.Open(path)
	defer func() {
		if file != nil {
			file.Close()
		}
	}()
	if err != nil {
		panic(fmt.Sprint("load config error, path=", path))
	}

	{{$.ClzName}}.Dic = make(map[int]*{{$.ClzName}}Elem)
	{{$.ClzName}}.Arr = make([]*{{$.ClzName}}Elem, 0, 32)

	bt,err  :=  ioutil.ReadAll(file)
	json.Unmarshal(bt, &{{$.ClzName}}.Arr)
	for _,conf := range {{$.ClzName}}.Arr{
		{{$.ClzName}}.Dic[conf.Id] = conf
	}
	
}
